datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  courses       Course[]
  enrolledCourses EnrolledUser[]
  userProgress UserProgress[]
  courseReviews CourseReview[]
  chapterNotes ChapterNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}
 
// Creation d'une application de cours en ligne

model Course {
  id String @id @default(cuid())
  slug String @unique
  title String
  description String?
  image String?
  level String?
  category String?

  published Boolean @default(false)

  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  chapters Chapter[]
  enrolledUsers EnrolledUser[]
  courseReviews CourseReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

model Chapter {
  id String @id @default(cuid())
  slug String @unique
  title String
  content String?
  videoUrl String?

  published Boolean @default(false)
  order Int

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  userProgress UserProgress[]
  chapterNotes ChapterNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model EnrolledUser {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([courseId])
  @@unique([userId, courseId])
}

model UserProgress {
  id String @id @default(cuid())

  isCompleted Boolean @default(false)
  completedAt DateTime?
  progress Int @default(0)

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([chapterId])
  @@unique([userId, chapterId])
}

model CourseReview {
  id        String   @id @default(cuid())
  rating    Int      // Note sur 5
  comment   String?
  authorId  String
  courseId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
  @@index([courseId])
  @@unique([authorId, courseId])
}

model ChapterNote {
  id          String    @id @default(cuid())
  content     String    // Le contenu de la note
  timestamp   Int?      // Position en secondes dans la vidéo (optionnel)
  color       String?   // Pour catégoriser visuellement les notes (#FF0000, #00FF00, etc.)
  
  authorId      String
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  chapterId   String
  chapter     Chapter   @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([authorId])
  @@index([chapterId])
}